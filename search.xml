<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Something About Me</title>
    <url>/2024/10/19/aboutme/</url>
    <content><![CDATA[<h1 align="center"><i> Who am I ?<img src = "https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/wave.gif" width = 40px height=40px></i></h1>
<center>
Hi I'm Long Hanrui, HenRiser,a coder,also a player<br><br>
<p>B.E. in Computer Science and Technology<br></p>
<p>@ University of Science and Technology of China<br></p>
<p>September 2022 - June 2026 @ Anhui, Chinas<br><br></p>
</center>
<span id="more"></span>
<h1 align="center"><i> My Language & Skill <img src = "https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/code.gif" width = 40px height=40px> </i></h1>
<h3 align="center">
    <a href="https://skillicons.dev">
      <img src="https://skillicons.dev/icons?i=c,cpp,cs,python" /><br>
      <img src="https://skillicons.dev/icons?i=github,git,linux,azure" /><br>
      <img src="https://skillicons.dev/icons?i=unity,vscode,visualstudio" />  
    </a>
</h3>
<p align="center"><img src="https://raw.githubusercontent.com/khoa083/khoa/main/Khoa_ne/img/Rainbow.gif" width="100%"></p>
<h1 align="center"><i> Connect With Me <img src='https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/handShake.gif' width="50px" height=50px> </i></h1>
<p align="center">
<a href="mailto:hrlong_@outlook.com"><img title="Email" src="https://logospng.org/download/microsoft-outlook/logo-microsoft-outlook-1024.png"width="50px" height=50px></a><a href="https://github.com/HenRiser"><img title="Github" src="https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/github.gif"width="50px" height=50px,target="_blank"></a>
</p>
<h1 align="center"><i> TTTTTThank You! <img src='https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/winkFace.gif' width="50px" height=50px> </i></h1>]]></content>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetcodeHard-871最低加油次数</title>
    <url>/2024/10/23/LeetcodeHard-871/</url>
    <content><![CDATA[<p>写在前面：该题转载至leetcode力扣 <em><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9taW5pbXVtLW51bWJlci1vZi1yZWZ1ZWxpbmctc3RvcHM=">No.871–最低加油次数<i class="fa fa-external-link-alt"></i></span></em> 😃</p>
<h2 id="题目描述：">题目描述：</h2>
<h3 id="No-871最低加油次数">No.871最低加油次数</h3>
<p>汽车从起点出发驶向目的地，该目的地位于出发位置东面 <code>target </code>英里处。</p>
<p>沿途有加油站，用数组 <code>stations </code>表示。其中 <code>stations[i] = [positioni, fueli]</code> 表示第 <code>i</code> 个加油站位于出发位置东面 <code>positioni</code> 英里处，并且有 <code>fueli</code> 升汽油。</p>
<p>假设汽车油箱的容量是无限的，其中最初有 <code>startFuel</code> 升燃料。它每行驶 <code>1</code> 英里就会用掉 <code>1</code> 升汽油。当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。</p>
<p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 <code>-1</code> 。</p>
<p>注意：如果汽车到达加油站时剩余燃料为 <code>0</code>，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 <code>0</code>，仍然认为它已经到达目的地。</p>
<h4 id="示例1：">示例1：</h4>
<blockquote>
<p>输入：target = <code>1</code>, startFuel = <code>1</code>, stations = <code>[]</code><br>
输出：<code>0</code>解释：可以在不加油的情况下到达目的地。</p>
</blockquote>
<span id="more"></span>
<h4 id="示例2：">示例2：</h4>
<blockquote>
<p>输入：target = <code>100</code>, startFuel = <code>1</code>, stations = <code>[[10,100]]</code><br>
输出：<code>-1</code>解释：无法抵达目的地，甚至无法到达第一个加油站。</p>
</blockquote>
<h4 id="示例3：">示例3：</h4>
<blockquote>
<p>输入：target = <code>100</code>, startFuel = <code>10</code>, stations = <code>[[10,60],[20,30],[30,30],[60,40]]</code><br>
输出：<code>2</code>解释：出发时有 <code>10</code> 升燃料。开车来到距起点 <code>10</code> 英里处的加油站，消耗 <code>10</code>升燃料。将汽油从 <code>0</code> 升加到 <code>60</code> 升。然后，从 <code>10</code> 英里处的加油站开到 <code>60</code> 英里处的加油站（消耗 <code>50</code> 升燃料），并将汽油从 <code>10</code> 升加到 <code>50</code> 升。然后开车抵达目的地。沿途在两个加油站停靠，所以返回 <code>2</code> 。</p>
</blockquote>
<h4 id="数据范围：">数据范围：</h4>
<blockquote>
<p><code>1</code> &lt;= target, startFuel &lt;= <code>109</code><br>
<code>0</code> &lt;= stations.length &lt;= <code>500</code><br>
<code>1</code> &lt;= positioni &lt; positioni+1 &lt; target<br>
<code>1</code> &lt;= fueli &lt; <code>109</code></p>
</blockquote>
<h4 id="默认代码模板：">默认代码模板：</h4>
<p>C:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">minRefuelStops</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span> startFuel, <span class="type">int</span>** stations, <span class="type">int</span> stationsSize, <span class="type">int</span>* stationsColSize)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minRefuelStops</span>(<span class="params">self, target: <span class="built_in">int</span>, startFuel: <span class="built_in">int</span>, stations: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br></pre></td></tr></table></figure>
<h3 id="题目解析：">题目解析：</h3>
<p>dp可以，贪心也可以，这里先说dp</p>
<h4 id="动态规划：">动态规划：</h4>
<p>转移方程：</p>
<p><code>dp[j + 1] = max(dp[j + 1],dp[j] + stations[i][1])</code></p>
<p><code>dp[j]</code>表示加了j次油的情况下最远行驶距离，如果在最新遍历到的一个加油站加油能够使行驶距离到新高的话就更新dp，</p>
<p>每次途径一个加油站都往回遍历一遍已经走过的加油站更新<code>dp[i]</code>，</p>
<p>如果目的地<code>target&lt;dp[i]</code>,就说明在i次加油的情况下能到目的地，在符合条件的<code>dp[i]</code>中选择最小的i值即为所求答案。</p>
<!-- #### 效果示意： -->
<h5 id="复杂度：">复杂度：</h5>
<p>每次遍历到新的加油站都要回头看一遍遍历过的，所以时间复杂度O(n<sup>2</sup>).</p>
<p>要在程序中维护数组<code>dp[]</code>,其大小是<code>n</code>,空间复杂度O(n).</p>
<h5 id="完整代码：">完整代码：</h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">minRefuelStops</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span> startFuel, <span class="type">int</span>** stations, <span class="type">int</span> stationsSize, <span class="type">int</span>* stationsColSize)</span>&#123;</span><br><span class="line">    <span class="type">long</span> dp[stationsSize+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=stationsSize;i++)</span><br><span class="line">        dp[i]=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>] = startFuel;<span class="comment">//dp[i]为加i次油能到的最远距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stationsSize; i++) <span class="comment">//途径的加油站</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">0</span>; j--) <span class="comment">//每次遍历到一个新的加油站的时候回头看能否更新dp[]</span></span><br><span class="line">            <span class="keyword">if</span> (dp[j] &gt;= stations[i][<span class="number">0</span>]) </span><br><span class="line">                dp[j + <span class="number">1</span>] = dp[j + <span class="number">1</span>]&gt;dp[j] + stations[i][<span class="number">1</span>]?dp[j + <span class="number">1</span>]:dp[j] + stations[i][<span class="number">1</span>];<span class="comment">//如果在当前遍历到的加油站加油，会不会跑得更远？(dp[]变得更大)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= stationsSize; i++) </span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt;= target) <span class="comment">//i次是能到目的地的最小的加油次数</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反悔贪心：">反悔贪心：</h4>
<p>用一个最大堆维护当前遍历到的加油站的加油量,如果当前行驶距离小于目的地的距离，就从最大堆中取出最大值，加到行驶范围中，加油次数自增，再做距离的判断。</p>
<p>如果在某次判断中第一次行驶距离大于等于了目的地的距离，就返回当前的加油次数，如果堆已经空了都没到目的地就返回-1。</p>
<h5 id="完整代码">完整代码</h5>
<p>这里引用了 <em><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9taW5pbXVtLW51bWJlci1vZi1yZWZ1ZWxpbmctc3RvcHMvc29sdXRpb25zLzI5MjEwNjQvenVpLWRhLWR1aS10YW4teGluLXB5dGhvbmphdmFjZ29qc3J1c3QtYi15bGRwLw==">灵茶山艾府大佬的python题解<i class="fa fa-external-link-alt"></i></span></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minRefuelStops</span>(<span class="params">self, target: <span class="built_in">int</span>, startFuel: <span class="built_in">int</span>, stations: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        stations.append((target, <span class="number">0</span>))</span><br><span class="line">        ans, miles = <span class="number">0</span>, startFuel</span><br><span class="line">        fuel_heap = []  <span class="comment"># 下面把堆中元素取反，当作最大堆用</span></span><br><span class="line">        <span class="keyword">for</span> position, fuel <span class="keyword">in</span> stations:</span><br><span class="line">            <span class="keyword">while</span> fuel_heap <span class="keyword">and</span> miles &lt; position:  <span class="comment"># 没有足够的油到达 position</span></span><br><span class="line">                miles -= heappop(fuel_heap)  <span class="comment"># 选油量最多的油桶</span></span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> miles &lt; position:  <span class="comment"># 无法到达</span></span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            heappush(fuel_heap, -fuel)  <span class="comment"># 留着后面加油</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">作者：灵茶山艾府</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<hr>
<p align="center"><img src="https://raw.githubusercontent.com/khoa083/khoa/main/Khoa_ne/img/Rainbow.gif" width="100%"></p>
<h1 align="center"><i> Connect With Me <img src='https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/handShake.gif' width="50px" height=50px> </i></h1>
<p align="center">
<a href="mailto:hrlong_@outlook.com"><img title="Email" src="https://logospng.org/download/microsoft-outlook/logo-microsoft-outlook-1024.png"width="50px" height=50px></a><a href="https://github.com/HenRiser"><img title="Github" src="https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/github.gif"width="50px" height=50px,target="_blank"></a>
</p>
<h1 align="center"><i> TTTTTThank You! <img src='https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/winkFace.gif' width="50px" height=50px> </i></h1>]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetcodeHard-42接雨水</title>
    <url>/2024/10/22/LeetcodeHard-42/</url>
    <content><![CDATA[<p>写在前面：该题转载至leetcode力扣 <em><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy90cmFwcGluZy1yYWluLXdhdGVy">No.42–接雨水<i class="fa fa-external-link-alt"></i></span></em> 😃</p>
<h2 id="题目描述：">题目描述：</h2>
<h3 id="No-42接雨水">No.42接雨水</h3>
<p>给定 <code>n</code> 个<em>非负整数</em>表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>
<h4 id="示例1：">示例1：</h4>
 <img src="/2024/10/22/LeetcodeHard-42/example.png" class="" title="example_pic">
<blockquote>
<p>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]<br>
输出：6<br>
解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。</p>
</blockquote>
<span id="more"></span>
<h4 id="示例2：">示例2：</h4>
<blockquote>
<p>输入：height = [4,2,0,3,2,5]<br>
输出：9</p>
</blockquote>
<h4 id="数据范围：">数据范围：</h4>
<blockquote>
<p>n == height.length<br>
1 &lt;= n &lt;= 2 * 104<br>
0 &lt;= height[i] &lt;= 105</p>
</blockquote>
<h4 id="默认代码模板：">默认代码模板：</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>* height, <span class="type">int</span> heightSize)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="题目解析：">题目解析：</h4>
<p>该题最容易想到的，也是性能最好的代码，是左右相向双指针。</p>
<p>我们以样例1为例：</p>
<p>下雨前：</p>
<img src="/2024/10/22/LeetcodeHard-42/exampleEmpty.png" class="" title="example_pic">
<p>想象l，r两个指针从左右两端向中间行进，我们需要维护左右两个指针，左右两个指针所经过的最大高度以及最后的返回值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r= heightSize<span class="number">-1</span>,sum=<span class="number">0</span>,lMax=<span class="number">0</span>,rMax=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>在左右指针相遇的时候就已经遍历了全体数组，而一个指针只有在遇到不比他矮的柱子后，他身后经过的空位才能接到雨水，所以只需要对全体数组进行一次遍历，结合遍历过程中指针每一步行进时的反馈，就可以得出全部的接到雨水数，也就是空缺数。</p>
<p>所以我们用一个在左右指针相遇时停止的while循环进行数组遍历：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在每一次遍历中都更新左右指针所经过的最高柱子的高度：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lMax = lMax&gt;height[l]?lMax:height[l];</span><br><span class="line">rMax = rMax&gt;height[r]?rMax:height[r];</span><br></pre></td></tr></table></figure>
<details open>
<summary><span class="pre-summary">&nbsp;</span><strong>为什么要维护最高柱子高度？</strong></summary><p>如果指针在记录到经过路径的最高柱子a的高度h后又遇到了新的不比a矮的柱子b，那么a和b之间的所有高度不高于h的柱子上方都可以被视为空缺，而h与中间的柱子a<sub>i</sub>的高度h<sub>i</sub>的高度之差h-h<sub>i</sub>就是柱子a<sub>i</sub>上方的空缺所能接的雨水量。</p>
</details>
<p>只有在遇到至少不比经过的柱子矮的柱子才能接到雨水，那岂不是在遇到符合条件的柱子前都不知道要不要将遍历到的柱子对应的空缺加入到sum里面？所以我们可以选择一个指针行进的条件----前方有不比自己经过的最高柱子矮的柱子时，才会向前行进，即：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(lMax&gt;rMax)&#123;</span><br><span class="line">            sum+=rMax-height[r];</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sum+=lMax-height[l];</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h4 id="效果示意：">效果示意：</h4>
<img src="/2024/10/22/LeetcodeHard-42/step.gif" class="" title="example_pic">
<p>这样，每次循环只移动一个指针行进一步，而这个指针定然会在两个指针顺利会师前遍历到符合条件的新柱子，而在路上遇到的所有矮柱子都会为sum的增长做贡献。</p>
<h4 id="复杂度：">复杂度：</h4>
<p>使用双指针求解只需要遍历一次，而且只需要维护常数个变量，所以空间复杂度是O(1),时间复杂度是O(n)。</p>
<h4 id="完整代码：">完整代码：</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>* height, <span class="type">int</span> heightSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=heightSize<span class="number">-1</span>,sum=<span class="number">0</span>,lMax=<span class="number">0</span>,rMax=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        lMax = lMax&gt;height[l]?lMax:height[l];</span><br><span class="line">        rMax = rMax&gt;height[r]?rMax:height[r];</span><br><span class="line">        <span class="keyword">if</span>(lMax&gt;rMax)&#123;</span><br><span class="line">            sum+=rMax-height[r];</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sum+=lMax-height[l];</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p align="center"><img src="https://raw.githubusercontent.com/khoa083/khoa/main/Khoa_ne/img/Rainbow.gif" width="100%"></p>
<h1 align="center"><i> Connect With Me <img src='https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/handShake.gif' width="50px" height=50px> </i></h1>
<p align="center">
<a href="mailto:hrlong_@outlook.com"><img title="Email" src="https://logospng.org/download/microsoft-outlook/logo-microsoft-outlook-1024.png"width="50px" height=50px></a><a href="https://github.com/HenRiser"><img title="Github" src="https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/github.gif"width="50px" height=50px,target="_blank"></a>
</p>
<h1 align="center"><i> TTTTTThank You! <img src='https://raw.githubusercontent.com/rahulbanerjee26/githubProfileReadmeGenerator/main/gifs/winkFace.gif' width="50px" height=50px> </i></h1>]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
</search>
